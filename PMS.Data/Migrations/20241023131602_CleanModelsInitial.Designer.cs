// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PMS.Data;

#nullable disable

namespace PMSWeb.Data.Migrations
{
    [DbContext(typeof(PMSDbContext))]
    [Migration("20241023131602_CleanModelsInitial")]
    partial class CleanModelsInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PMS.Data.Models.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("PMS.Data.Models.Consumable", b =>
                {
                    b.Property<Guid>("ConsumableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the Consumable");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the Creator");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Description of the consumable");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of the consumable");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("Price")
                        .HasComment("The price of the consumable per unit");

                    b.Property<double>("ROB")
                        .HasColumnType("float")
                        .HasComment("The remaining quantity on stock");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The measuring unit of the consumable");

                    b.HasKey("ConsumableId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("PMS.Data.Models.ConsumableEquipment", b =>
                {
                    b.Property<Guid>("ConsumableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConsumableId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("ConsumablesEquipments");
                });

            modelBuilder.Entity("PMS.Data.Models.ConsumableSupplier", b =>
                {
                    b.Property<Guid>("ConsumableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConsumableId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ConsumablesSuppliers");
                });

            modelBuilder.Entity("PMS.Data.Models.Country", b =>
                {
                    b.Property<Guid>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("PMS.Data.Models.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the Equipment");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the Creator");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Description of equipment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MakerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the Maker");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The name of equipment");

                    b.HasKey("EquipmentId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("MakerId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("PMS.Data.Models.Maker", b =>
                {
                    b.Property<Guid>("MakerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of Maker");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Id of the creator of this Maker entry");

                    b.Property<string>("Description")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasComment("Description of the maker");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The E-mail of the maker");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete implemented");

                    b.Property<string>("MakerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Name of the maker");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Phone number of the maker");

                    b.HasKey("MakerId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Makers");
                });

            modelBuilder.Entity("PMS.Data.Models.Manual", b =>
                {
                    b.Property<Guid>("ManualId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the manual");

                    b.Property<string>("ContentURL")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("URL to file with content of the manual");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the Creator");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the equipment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete implemented");

                    b.Property<Guid>("MakerId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the maker");

                    b.Property<string>("ManualName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the manual");

                    b.Property<Guid>("SparepartId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the spare part");

                    b.HasKey("ManualId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("MakerId");

                    b.HasIndex("SparepartId");

                    b.ToTable("Manuals");
                });

            modelBuilder.Entity("PMS.Data.Models.RoutineMaintenance", b =>
                {
                    b.Property<Guid>("RoutMaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the RoutineMaintenance");

                    b.Property<string>("CReatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the creator of the maintenance");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when maintanance is completed");

                    b.Property<int>("ConditionAfter")
                        .HasColumnType("int")
                        .HasComment("Condition of equipment after the job");

                    b.Property<string>("Description")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasComment("Description of the maintenance");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when maintanance should be done");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the employee who did it");

                    b.Property<string>("EmployeePosition")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Position of the employee who did it");

                    b.Property<int>("Interval")
                        .HasColumnType("int")
                        .HasComment("Interval to do the maintanance");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPostponed")
                        .HasColumnType("bit")
                        .HasComment("Is it postponed - the maintenance");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the maintanance");

                    b.Property<int>("Satus")
                        .HasColumnType("int")
                        .HasComment("Current status of the maintenance");

                    b.HasKey("RoutMaintId");

                    b.HasIndex("CReatorId");

                    b.ToTable("RoutineMaintenances");
                });

            modelBuilder.Entity("PMS.Data.Models.RoutineMaintenanceEquipment", b =>
                {
                    b.Property<Guid>("RoutineMaintenanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoutineMaintenanceId", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("RoutineMaintenancesEquipments");
                });

            modelBuilder.Entity("PMS.Data.Models.Sparepart", b =>
                {
                    b.Property<Guid>("SparepartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UniqueIdentifier of the spare part");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date when spare created on");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique  identifier of the creator of the spare");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasComment("Description of the spare part");

                    b.Property<DateTime>("EditedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date when spare last edited");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the related equipment");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Soft delete fpr spare part");

                    b.Property<decimal>("Price")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("Price")
                        .HasComment("The price for one unit of the spare");

                    b.Property<double>("ROB")
                        .HasColumnType("float")
                        .HasComment("Remaining stock");

                    b.Property<Guid?>("RoutineMaintenanceRoutMaintId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SparepartName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the spare part");

                    b.Property<Guid?>("SpecificMaintenanceSpecMaintId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Teh measuring units");

                    b.HasKey("SparepartId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("RoutineMaintenanceRoutMaintId");

                    b.HasIndex("SpecificMaintenanceSpecMaintId");

                    b.ToTable("Spareparts");
                });

            modelBuilder.Entity("PMS.Data.Models.SparepartSupplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SparepartId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SupplierId", "SparepartId");

                    b.HasIndex("SparepartId");

                    b.ToTable("SparepartsSuppliers");
                });

            modelBuilder.Entity("PMS.Data.Models.SpecificMaintenance", b =>
                {
                    b.Property<Guid>("SpecMaintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the RoutineMaintenance");

                    b.Property<string>("CReatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Unique identifier of the creator of the maintenance");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when maintanance is completed");

                    b.Property<int>("ConditionAfter")
                        .HasColumnType("int")
                        .HasComment("Condition of equipment after the job");

                    b.Property<string>("Description")
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasComment("Description of the maintenance");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date when maintanance should be done");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the employee who did it");

                    b.Property<string>("EmployeePosition")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Position of the employee who did it");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the equipment maintained");

                    b.Property<int>("Interval")
                        .HasColumnType("int")
                        .HasComment("Interval to do the maintanance");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPostponed")
                        .HasColumnType("bit")
                        .HasComment("Is it postponed - the maintenance");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the maintanance");

                    b.Property<int>("Satus")
                        .HasColumnType("int")
                        .HasComment("Current status of the maintenance");

                    b.HasKey("SpecMaintId");

                    b.HasIndex("CReatorId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("SpecificMaintenances");
                });

            modelBuilder.Entity("PMS.Data.Models.Supplier", b =>
                {
                    b.Property<Guid>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UniqueIdentifierOf The Supplier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)")
                        .HasComment("The name of equipment");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UniqueIdentifierOf The City");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("UniqueIdentifierOf The Country");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("UniqueIdentifierOf The Creator");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of equipment");

                    b.Property<bool>("IsDleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasComment("The name of equipment");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The name of equipment");

                    b.HasKey("SupplierId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatorId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("PMS.Data.Models.Identity.PMSUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullUserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("PMSUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PMS.Data.Models.Consumable", b =>
                {
                    b.HasOne("PMS.Data.Models.Identity.PMSUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PMS.Data.Models.ConsumableEquipment", b =>
                {
                    b.HasOne("PMS.Data.Models.Consumable", "Consumable")
                        .WithMany("ConsumablesEquipments")
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Equipment", "Equipment")
                        .WithMany("ConsumablesEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("PMS.Data.Models.ConsumableSupplier", b =>
                {
                    b.HasOne("PMS.Data.Models.Consumable", "Consumable")
                        .WithMany("ConsumablesSuppliers")
                        .HasForeignKey("ConsumableId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Supplier", "Supplier")
                        .WithMany("ConsumablesSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Consumable");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PMS.Data.Models.Equipment", b =>
                {
                    b.HasOne("PMS.Data.Models.Identity.PMSUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Maker", "Maker")
                        .WithMany("Equipment")
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Maker");
                });

            modelBuilder.Entity("PMS.Data.Models.Maker", b =>
                {
                    b.HasOne("PMS.Data.Models.Identity.PMSUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PMS.Data.Models.Manual", b =>
                {
                    b.HasOne("PMS.Data.Models.Identity.PMSUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Equipment", "Equipment")
                        .WithMany("Manuals")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Maker", "Maker")
                        .WithMany("Manuals")
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Sparepart", "Sparepart")
                        .WithMany("Manuals")
                        .HasForeignKey("SparepartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Equipment");

                    b.Navigation("Maker");

                    b.Navigation("Sparepart");
                });

            modelBuilder.Entity("PMS.Data.Models.RoutineMaintenance", b =>
                {
                    b.HasOne("PMS.Data.Models.Identity.PMSUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CReatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PMS.Data.Models.RoutineMaintenanceEquipment", b =>
                {
                    b.HasOne("PMS.Data.Models.Equipment", "Equipment")
                        .WithMany("RoutineMaintenancesEquipments")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.RoutineMaintenance", "RoutineMaintenance")
                        .WithMany("RoutineMaintenancesEquipments")
                        .HasForeignKey("RoutineMaintenanceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("RoutineMaintenance");
                });

            modelBuilder.Entity("PMS.Data.Models.Sparepart", b =>
                {
                    b.HasOne("PMS.Data.Models.Identity.PMSUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Equipment", "Equipment")
                        .WithMany("SpareParts")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.RoutineMaintenance", null)
                        .WithMany("Spareparts")
                        .HasForeignKey("RoutineMaintenanceRoutMaintId");

                    b.HasOne("PMS.Data.Models.SpecificMaintenance", null)
                        .WithMany("Spareparts")
                        .HasForeignKey("SpecificMaintenanceSpecMaintId");

                    b.Navigation("Creator");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("PMS.Data.Models.SparepartSupplier", b =>
                {
                    b.HasOne("PMS.Data.Models.Sparepart", "Sparepart")
                        .WithMany("SparepartsSuppliers")
                        .HasForeignKey("SparepartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Supplier", "Supplier")
                        .WithMany("SparepartsSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Sparepart");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("PMS.Data.Models.SpecificMaintenance", b =>
                {
                    b.HasOne("PMS.Data.Models.Identity.PMSUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CReatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Equipment", "Equipment")
                        .WithMany("SpecificMaintenances")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("PMS.Data.Models.Supplier", b =>
                {
                    b.HasOne("PMS.Data.Models.City", "City")
                        .WithMany("Suppliers")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Country", "Country")
                        .WithMany("Suppliers")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Data.Models.Identity.PMSUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("PMS.Data.Models.City", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("PMS.Data.Models.Consumable", b =>
                {
                    b.Navigation("ConsumablesEquipments");

                    b.Navigation("ConsumablesSuppliers");
                });

            modelBuilder.Entity("PMS.Data.Models.Country", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("PMS.Data.Models.Equipment", b =>
                {
                    b.Navigation("ConsumablesEquipments");

                    b.Navigation("Manuals");

                    b.Navigation("RoutineMaintenancesEquipments");

                    b.Navigation("SpareParts");

                    b.Navigation("SpecificMaintenances");
                });

            modelBuilder.Entity("PMS.Data.Models.Maker", b =>
                {
                    b.Navigation("Equipment");

                    b.Navigation("Manuals");
                });

            modelBuilder.Entity("PMS.Data.Models.RoutineMaintenance", b =>
                {
                    b.Navigation("RoutineMaintenancesEquipments");

                    b.Navigation("Spareparts");
                });

            modelBuilder.Entity("PMS.Data.Models.Sparepart", b =>
                {
                    b.Navigation("Manuals");

                    b.Navigation("SparepartsSuppliers");
                });

            modelBuilder.Entity("PMS.Data.Models.SpecificMaintenance", b =>
                {
                    b.Navigation("Spareparts");
                });

            modelBuilder.Entity("PMS.Data.Models.Supplier", b =>
                {
                    b.Navigation("ConsumablesSuppliers");

                    b.Navigation("SparepartsSuppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
